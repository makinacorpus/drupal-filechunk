<?php
/**
 * @file
 * The module.
 */

/**
 * We do require this.
 */
require_once __DIR__ . '/filechunk.element.inc';

/**
 * And this too.
 */
require_once __DIR__ . '/filechunk.field.inc';

/**
 * Implements hook_menu().
 */
function filechunk_menu() {
  $items = [];
  $items['system/chunk-upload'] = [
    'page callback'     => 'filechunk_upload_callback',
    'access callback'   => 'filechunk_upload_access',
    'type'              => MENU_CALLBACK,
    'file'              => 'filechunk.ajax.inc',
  ];
  $items['system/chunk-remove'] = [
    'page callback'     => 'filechunk_remove_callback',
    'access callback'   => 'filechunk_remove_access',
    'type'              => MENU_CALLBACK,
    'file'              => 'filechunk.ajax.inc',
  ];
  $items['system/chunk-upload/test'] = [
    'page callback'     => 'drupal_get_form',
    'page arguments'    => ['filechunk_test_form'],
    'access arguments'  => ['this permission will not exist'],
    'type'              => MENU_CALLBACK,
  ];
  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function filechunk_admin_paths() {
  return [
    'system/chunk-upload/test' => true,
    'system/chunk-upload/test/*' => true,
  ];
}

/**
 * Implements hook_theme().
 */
function filechunk_theme() {
  return [
    'filechunk_file_input' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Implements hook_library().
 */
function filechunk_library() {
  return [
    'moxie' => [
      'title' => "mOxie",
      'version' => '1.4.1',
      'website' => "https://github.com/moxiecode/moxie",
      'js' => [drupal_get_path('module', 'filechunk') . '/moxie-1.4.1/bin/js/moxie.min.js' => []],
    ],
    'widget' => [
      'title' => "Chunked file widget",
      'version' => '1.0',
      'js' => [drupal_get_path('module', 'filechunk') . '/filechunk.js' => []],
      'css' => [drupal_get_path('module', 'filechunk') . '/filechunk.css' => []],
      'dependencies' => [['filechunk', 'moxie']],
    ],
  ];
}

/**
 * Get upload directory.
 *
 * @return string
 */
function filechunk_upload_dir_get() {
  // return variable_get('filechunk_upload_directory', "temporary://filechunk") . '/';
  return "temporary://filechunk/";
}

/**
 * Render file preview for the widget element.
 *
 * @param stdClass $file
 *
 * @return mixed
 *   drupal_render() friendly structure.
 */
function filechunk_element_file_display($file) {
  return ['#theme' => 'file_link', '#file' => $file];
}

/**
 * Parse content range header.
 *
 * @param string $contentRange
 */
function filechunk_parse_range($contentRange) {
  $matches = [];
  if (!preg_match('@^bytes (\d+)-(\d+)/(\d+)$@', trim($contentRange), $matches)) {
    return false;
  }
  list(, $start, $stop, $filesize) = $matches;
  if ($filesize < $start) {
    return false; // Invalid request.
  }
  if ($filesize < $stop) {
    return false; // Invalid request.
  }
  if ($stop < $start) {
    return false; // Invalid request.
  }
  if ($start === $stop) {
    return false; // Cannot import '0' sized file.
  }
  return [$start, $stop, $filesize];
}

/**
 * Menu access callback.
 */
function filechunk_remove_access() {
  if ('POST' !== $_SERVER['REQUEST_METHOD']) {
    return false;
  }
  if (empty($_SERVER['HTTP_X_FILE_ID'])) {
    return false;
  }
  if (empty($_SERVER['HTTP_X_FILE_TOKEN']) || !drupal_valid_token($_SERVER['HTTP_X_FILE_TOKEN'])) {
    return false;
  }
  return true;
}

/**
 * Menu access callback.
 */
function filechunk_upload_access() {
  if ('POST' !== $_SERVER['REQUEST_METHOD']) {
    return false;
  }
  if (empty($_SERVER['HTTP_X_FILE_NAME'])) {
    return false;
  }
  if (empty($_SERVER['HTTP_CONTENT_RANGE']) || !filechunk_parse_range($_SERVER['HTTP_CONTENT_RANGE'])) {
    return false;
  }
  if (empty($_SERVER['HTTP_X_FILE_TOKEN']) || !drupal_valid_token($_SERVER['HTTP_X_FILE_TOKEN'])) {
    return false;
  }
  return true;
}

/**
 * Simple test form.
 */
function filechunk_test_form($form, &$form_state, $fid = null) {

  $form['#tree'] = true;
  $form['#form_horizontal'] = true;

  $form['mandatory'] = [
    '#type'     => 'textfield',
    '#title'    => t("Some mandatory text"),
    '#required' => true,
  ];

  $form['foo']['bar']['my_file'] = [
    '#title'  => t("Please upload your file"),
    '#type'   => 'file_chunked',
  ];

  if (isset($fid) && ($file = file_load($fid))) {
    $form['foo']['bar']['my_file']['#default_value'] = $file;
  }

  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = [
    '#type'   => 'submit',
    '#value'  => t("Hop hop!"),
  ];

  return $form;
}

/**
 * Simple test form submit.
 */
function filechunk_test_form_submit($form, &$form_state) {
  $file = $form_state['values']['foo']['bar']['my_file'];
  if ($file) {
    drupal_set_message(t("File has been saved."));
    $form_state['redirect'] = 'system/chunk-upload/test/' . $file->fid;
    $file->status = 1;
    file_save($file);
  }
}
